const { createApp, ref, reactive, computed, onMounted } = Vue

createApp({
    setup() {

        function goHome() {
            currentPage.value = 'home';
            mobileMenuOpen.value = false;
            selectedGame.value = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–≥—Ä—É
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        const currentPage = ref('home')
        const selectedGame = ref(null)
        const theme = ref('light')
        const themeIcon = computed(() => theme.value === 'light' ? 'üåô' : '‚òÄÔ∏è')
        const mobileMenuOpen = ref(false)

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–º—ã
        function setTheme(newTheme) {
            theme.value = newTheme;
            document.documentElement.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        function toggleTheme() {
            const newTheme = theme.value === 'light' ? 'dark' : 'light';
            setTheme(newTheme);
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
        onMounted(() => {
            const savedTheme = localStorage.getItem('theme');
            if (savedTheme) {
                setTheme(savedTheme);
            } else {
                setTheme('light');
            }
        })

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã "–ù–∞–π–¥–∏ –ø–∞—Ä—É"
        const gameState = reactive({
            cards: [],
            moves: 0,
            matchedPairs: 0,
            gameStarted: false,
            gameCompleted: false,
            flippedCards: [],
            totalPairs: 6,
            emojis: ['üò∫', 'üê∂', 'üêº', 'ü¶ä', 'üêª', 'üê∞', 'üêØ', 'üêÆ', 'üêπ', 'üê®'],
            feedbackMessages: [
                "–î–∞–≤–∞–π –Ω–∞–π–¥—ë–º –ø–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏!",
                "–ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "–û—Ç–ª–∏—á–Ω–æ! –ï—â—ë —á—É—Ç—å-—á—É—Ç—å!",
                "–£—Ä–∞! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!"
            ],
            feedbackMessage: computed(() => {
                if (!gameState.gameStarted) return gameState.feedbackMessages[0]
                if (gameState.gameCompleted) return gameState.feedbackMessages[3]
                if (gameState.matchedPairs > gameState.totalPairs / 2)
                    return gameState.feedbackMessages[2]
                return gameState.feedbackMessages[1]
            })
        })

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–≥—Ä—ã
        function initializeCards() {
            let gameCards = []
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏
            const selectedEmojis = [...gameState.emojis]
                .sort(() => 0.5 - Math.random())
                .slice(0, gameState.totalPairs)

            selectedEmojis.forEach(emoji => {
                gameCards.push({ value: emoji, isFlipped: false, isMatched: false })
                gameCards.push({ value: emoji, isFlipped: false, isMatched: false })
            })
            return gameCards.sort(() => Math.random() - 0.5)
        }

        // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
        function startGame() {
            gameState.cards = initializeCards()
            gameState.gameStarted = true
            gameState.gameCompleted = false
            gameState.moves = 0
            gameState.matchedPairs = 0
            gameState.flippedCards = []
        }

        // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É
        function resetGame() {
            startGame()
        }

        // –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
        function flipCard(index) {
            if (
                gameState.cards[index].isFlipped ||
                gameState.flippedCards.length === 2 ||
                gameState.gameCompleted ||
                gameState.cards[index].isMatched
            ) return

            gameState.cards[index].isFlipped = true
            gameState.flippedCards.push(index)

            if (gameState.flippedCards.length === 2) {
                gameState.moves++
                const [firstIndex, secondIndex] = gameState.flippedCards

                if (gameState.cards[firstIndex].value === gameState.cards[secondIndex].value) {
                    // –°–æ–≤–ø–∞–ª–∏
                    setTimeout(() => {
                        gameState.cards[firstIndex].isMatched = true
                        gameState.cards[secondIndex].isMatched = true
                        gameState.matchedPairs++

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
                        if (gameState.matchedPairs === gameState.totalPairs) {
                            gameState.gameCompleted = true
                        }

                        gameState.flippedCards = []
                    }, 500)
                } else {
                    // –ù–µ —Å–æ–≤–ø–∞–ª–∏ - –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                    setTimeout(() => {
                        gameState.cards[firstIndex].isFlipped = false
                        gameState.cards[secondIndex].isFlipped = false
                        gameState.flippedCards = []
                    }, 1000)
                }
            }
        }

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã "–£–≥–∞–¥–∞–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –±—É–∫–≤—É"
        const missingLetterGame = reactive({
            words: [
                { word: "–∫–æ—à–∫–∞", missingIndex: 2 },
                { word: "—Å–æ–±–∞–∫–∞", missingIndex: 3 },
                { word: "–º—ã—à–∫–∞", missingIndex: 2 },
                { word: "–ª–æ–∂–∫–∞", missingIndex: 2 },
                { word: "–≤–∏–ª–∫–∞", missingIndex: 2 },
                { word: "—á–∞—à–∫–∞", missingIndex: 2 },
                { word: "–∫–Ω–∏–≥–∞", missingIndex: 3 },
                { word: "–ª–∞–º–ø–∞", missingIndex: 3 },
                { word: "–¥–≤–µ—Ä—å", missingIndex: 3 }
            ],
            currentIndex: 0,
            currentWord: "",
            displayWord: "",
            options: [],
            selectedOption: null,
            answered: false,
            isCorrect: false
        })

        // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É "–£–≥–∞–¥–∞–π –±—É–∫–≤—É"
        function startMissingLetterGame() {
            missingLetterGame.currentIndex = Math.floor(Math.random() * missingLetterGame.words.length)
            const wordObj = missingLetterGame.words[missingLetterGame.currentIndex]

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
            missingLetterGame.currentWord = wordObj.word

            // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–æ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π –±—É–∫–≤–æ–π
            let display = wordObj.word.split('')
            display[wordObj.missingIndex] = '_'
            missingLetterGame.displayWord = display.join(' ')

            // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            const correctLetter = wordObj.word[wordObj.missingIndex]
            let options = [correctLetter]

            // –î–æ–±–∞–≤–ª—è–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ –±—É–∫–≤—ã
            while (options.length < 4) {
                const randomChar = String.fromCharCode(1072 + Math.floor(Math.random() * 32))
                if (!options.includes(randomChar) && randomChar !== correctLetter) {
                    options.push(randomChar)
                }
            }

            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
            missingLetterGame.options = options.sort(() => Math.random() - 0.5)
            missingLetterGame.selectedOption = null
            missingLetterGame.answered = false
            missingLetterGame.isCorrect = false
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –∏–≥—Ä–µ "–£–≥–∞–¥–∞–π –±—É–∫–≤—É"
        function checkMissingLetter(letter) {
            const wordObj = missingLetterGame.words[missingLetterGame.currentIndex]
            missingLetterGame.selectedOption = letter
            missingLetterGame.isCorrect = letter === wordObj.word[wordObj.missingIndex]
            missingLetterGame.answered = true
        }

        // –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –≤ –∏–≥—Ä–µ "–£–≥–∞–¥–∞–π –±—É–∫–≤—É"
        function nextMissingLetter() {
            startMissingLetterGame()
        }

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã "–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≥–æ–≤"
        const syllablesGame = reactive({
            words: [
                { word: "–º–∞—à–∏–Ω–∞", syllables: ["–º–∞", "—à–∏", "–Ω–∞"] },
                { word: "–∫—Ä–æ–≤–∞—Ç—å", syllables: ["–∫—Ä–æ", "–≤–∞—Ç—å"] },
                { word: "—è–±–ª–æ–∫–æ", syllables: ["—è", "–±–ª–æ", "–∫–æ"] },
                { word: "—Ç–µ–ª–µ—Ñ–æ–Ω", syllables: ["—Ç–µ", "–ª–µ", "—Ñ–æ–Ω"] },
                { word: "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", syllables: ["—Ö–æ", "–ª–æ", "–¥–∏–ª—å", "–Ω–∏–∫"] },
                { word: "–ª–∞–º–ø–∞", syllables: ["–ª–∞–º", "–ø–∞"] },
                { word: "–æ–∫–Ω–æ", syllables: ["–æ", "–∫–Ωo"] },
                { word: "–¥–≤–µ—Ä—å", syllables: ["–¥–≤–µ—Ä—å"] },
                { word: "—Å—Ç–æ–ª", syllables: ["—Å—Ç–æ–ª"] },
                { word: "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä", syllables: ["—Ç–µ", "–ª–µ", "–≤–∏", "–∑–æ—Ä"] },
                { word: "–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞", syllables: ["–º–∏–∫", "—Ä–æ", "–≤–æ–ª", "–Ω–æ–≤", "–∫–∞"] },
                { word: "–∫–æ–º–ø—å—é—Ç–µ—Ä", syllables: ["–∫–æ–º", "–ø—å—é", "—Ç–µ—Ä"] },
                { word: "–±–∞—Å–∫–µ—Ç–±–æ–ª", syllables: ["–±–∞—Å", "–∫–µ—Ç", "–±–æ–ª"] },
                { word: "—Ñ—É—Ç–±–æ–ª", syllables: ["—Ñ—É—Ç", "–±–æ–ª"] },
                { word: "–≤–µ–ª–æ—Å–∏–ø–µ–¥", syllables: ["–≤–µ", "–ª–æ", "—Å–∏", "–ø–µ–¥"] },
                { word: "—Å–∞–º–æ–∫–∞—Ç", syllables: ["—Å–∞", "–º–æ", "–∫–∞—Ç"] },
                { word: "–∞–ø–µ–ª—å—Å–∏–Ω", syllables: ["–∞", "–ø–µ–ª—å", "—Å–∏–Ω"] },
                { word: "–ø–æ–º–∏–¥–æ—Ä", syllables: ["–ø–æ", "–º–∏", "–¥–æ—Ä"] },
                { word: "–æ–≥–æ—Ä–æ–¥", syllables: ["–æ", "–≥–æ", "—Ä–æ–¥"] },
                { word: "—Å–∫–∞—Ç–µ—Ä—Ç—å", syllables: ["—Å–∫–∞", "—Ç–µ—Ä—Ç—å"] },
                { word: "–º–∞—Ç—Ä—ë—à–∫–∞", syllables: ["–º–∞", "—Ç—Ä—ë—à", "–∫–∞"] },
                { word: "—á–µ–º–æ–¥–∞–Ω", syllables: ["—á–µ", "–º–æ", "–¥–∞–Ω"] }
            ],
            currentIndex: 0,
            currentWord: "",
            syllables: [],
            shuffledSyllables: [],
            selectedSyllables: [],
            checked: false,
            isCorrect: false
        })

        // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É "–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≥–æ–≤"
        function startSyllablesGame() {
            syllablesGame.currentIndex = Math.floor(Math.random() * syllablesGame.words.length)
            const wordObj = syllablesGame.words[syllablesGame.currentIndex]

            syllablesGame.currentWord = wordObj.word
            syllablesGame.syllables = [...wordObj.syllables]
            syllablesGame.shuffledSyllables = [...wordObj.syllables].sort(() => Math.random() - 0.5)
            syllablesGame.selectedSyllables = []
            syllablesGame.checked = false
            syllablesGame.isCorrect = false
        }

        // –í—ã–±—Ä–∞—Ç—å —Å–ª–æ–≥ –≤ –∏–≥—Ä–µ "–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ"
        function selectSyllable(syllable) {
            if (syllablesGame.selectedSyllables.length < syllablesGame.syllables.length) {
                syllablesGame.selectedSyllables.push(syllable)
            }
        }

        // –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≥ –≤ –∏–≥—Ä–µ "–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ"
        function removeSyllable(index) {
            if (syllablesGame.selectedSyllables[index]) {
                syllablesGame.selectedSyllables.splice(index, 1)
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ–≤–æ –≤ –∏–≥—Ä–µ "–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ"
        function checkSyllablesWord() {
            const assembledWord = syllablesGame.selectedSyllables.join('')
            syllablesGame.isCorrect = assembledWord === syllablesGame.currentWord
            syllablesGame.checked = true
        }

        // –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –≤ –∏–≥—Ä–µ "–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ"
        function nextSyllables() {
            startSyllablesGame()
        }

        // –ò–≥—Ä–∞ "–ß—Ç–æ –∫—É–¥–∞?"
        const sortingGame = reactive({
            rooms: [
                { id: 'kitchen', name: '–ö—É—Ö–Ω—è', icon: 'üç≥' },
                { id: 'bedroom', name: '–°–ø–∞–ª—å–Ω—è', icon: 'üõèÔ∏è' },
                { id: 'bathroom', name: '–í–∞–Ω–Ω–∞—è', icon: 'üöø' }
            ],
            items: [
                { id: 1, name: '–¢–æ—Å—Ç–µ—Ä', icon: 'üçû', correctRoom: 'kitchen', room: null, placed: false },
                { id: 2, name: '–ü–æ–¥—É—à–∫–∞', icon: 'üõèÔ∏è', correctRoom: 'bedroom', room: null, placed: false },
                { id: 3, name: '–ú—ã–ª–æ', icon: 'üßº', correctRoom: 'bathroom', room: null, placed: false },
                { id: 4, name: '–ö–∞—Å—Ç—Ä—é–ª—è', icon: 'ü•ò', correctRoom: 'kitchen', room: null, placed: false },
                { id: 5, name: '–û–¥–µ—è–ª–æ', icon: 'üõå', correctRoom: 'bedroom', room: null, placed: false },
                { id: 6, name: '–ó—É–±–Ω–∞—è —â–µ—Ç–∫–∞', icon: 'ü™•', correctRoom: 'bathroom', room: null, placed: false }
            ],
            selectedItem: null,
            selectedRoom: null,
            placedItems: computed(() => sortingGame.items.filter(item => item.placed).length),
            checked: false,
            allCorrect: false
        })

        // –ù–∞—á–∞—Ç—å –∏–≥—Ä—É "–ß—Ç–æ –∫—É–¥–∞?"
        function startSortingGame() {
            sortingGame.items.forEach(item => {
                item.room = null;
                item.placed = false;
            });
            sortingGame.selectedItem = null;
            sortingGame.selectedRoom = null;
            sortingGame.checked = false;
            sortingGame.allCorrect = false;
        }

        // –í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç
        function selectItem(itemId) {
            sortingGame.selectedItem = itemId;
            sortingGame.selectedRoom = null;
        }

        // –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ
        function placeItem(roomId) {
            if (!sortingGame.selectedItem) return;

            const item = sortingGame.items.find(i => i.id === sortingGame.selectedItem);
            if (item) {
                item.room = roomId;
                item.placed = true;
                sortingGame.selectedItem = null;
                sortingGame.selectedRoom = null;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        function checkSorting() {
            sortingGame.checked = true;
            sortingGame.allCorrect = sortingGame.items.every(
                item => item.placed && item.room === item.correctRoom
            );
        }

        // –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É
        function resetSorting() {
            startSortingGame();
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä
        startMissingLetterGame()
        startSyllablesGame()
        startSortingGame()

        return {
            currentPage,
            selectedGame,
            theme,
            themeIcon,
            mobileMenuOpen,
            toggleTheme,
            gameState,
            missingLetterGame,
            syllablesGame,
            sortingGame,
            startGame,
            resetGame,
            flipCard,
            startMissingLetterGame,
            checkMissingLetter,
            nextMissingLetter,
            startSyllablesGame,
            selectSyllable,
            removeSyllable,
            checkSyllablesWord,
            nextSyllables,
            startSortingGame,
            selectItem,
            placeItem,
            checkSorting,
            goHome,
            resetSorting
        }
    }
}).mount('#app')