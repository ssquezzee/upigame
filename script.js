const { createApp } = Vue;

const App = {
  data() {
    return {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è
      currentPage: 'home',
      selectedGame: null,
      theme: 'light',
      mobileMenuOpen: false,
      
      // –ò–≥—Ä–∞ "–ù–∞–π–¥–∏ –ø–∞—Ä—É"
      gameState: {
        cards: [],
        moves: 0,
        matchedPairs: 0,
        gameStarted: false,
        gameCompleted: false,
        flippedCards: [],
        totalPairs: 6,
        emojis: ['üò∫', 'üê∂', 'üêº', 'ü¶ä', 'üêª', 'üê∞', 'üêØ', 'üêÆ', 'üêπ', 'üê®'],
        feedbackMessages: [
          "–î–∞–≤–∞–π –Ω–∞–π–¥—ë–º –ø–∞—Ä–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏!",
          "–ú–æ–ª–æ–¥–µ—Ü! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
          "–û—Ç–ª–∏—á–Ω–æ! –ï—â—ë —á—É—Ç—å-—á—É—Ç—å!",
          "–£—Ä–∞! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω!"
        ]
      },
      
      // –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –±—É–∫–≤—É"
      missingLetterGame: {
        words: [
          { word: "–∫–æ—à–∫–∞", missingIndex: 2 },
          { word: "—Å–æ–±–∞–∫–∞", missingIndex: 3 },
          { word: "–º—ã—à–∫–∞", missingIndex: 2 },
          { word: "–ª–æ–∂–∫–∞", missingIndex: 2 },
          { word: "–≤–∏–ª–∫–∞", missingIndex: 2 },
          { word: "—á–∞—à–∫–∞", missingIndex: 2 },
          { word: "–∫–Ω–∏–≥–∞", missingIndex: 3 },
          { word: "–ª–∞–º–ø–∞", missingIndex: 3 },
          { word: "–¥–≤–µ—Ä—å", missingIndex: 3 }
        ],
        currentIndex: 0,
        currentWord: "",
        displayWord: "",
        options: [],
        selectedOption: null,
        answered: false,
        isCorrect: false
      },
      
      // –ò–≥—Ä–∞ "–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≥–æ–≤"
      syllablesGame: {
        words: [
          { word: "–º–∞—à–∏–Ω–∞", syllables: ["–º–∞", "—à–∏", "–Ω–∞"] },
          { word: "–∫—Ä–æ–≤–∞—Ç—å", syllables: ["–∫—Ä–æ", "–≤–∞—Ç—å"] },
          { word: "—è–±–ª–æ–∫–æ", syllables: ["—è", "–±–ª–æ", "–∫–æ"] },
          { word: "—Ç–µ–ª–µ—Ñ–æ–Ω", syllables: ["—Ç–µ", "–ª–µ", "—Ñ–æ–Ω"] },
          { word: "—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", syllables: ["—Ö–æ", "–ª–æ", "–¥–∏–ª—å", "–Ω–∏–∫"] },
          { word: "–ª–∞–º–ø–∞", syllables: ["–ª–∞–º", "pa"] },
          { word: "–æ–∫–Ω–æ", syllables: ["–æ", "–∫–Ω–æ"] },
          { word: "–¥–≤–µ—Ä—å", syllables: ["–¥–≤–µ—Ä—å"] },
          { word: "—Å—Ç–æ–ª", syllables: ["—Å—Ç–æ–ª"] },
          { word: "—Ç–µ–ª–µ–≤–∏–∑–æ—Ä", syllables: ["—Ç–µ", "–ª–µ", "–≤–∏", "–∑–æ—Ä"] },
          { word: "–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞", syllables: ["–º–∏–∫", "—Ä–æ", "–≤–æ–ª", "–Ω–æ–≤", "–∫–∞"] },
          { word: "–∫–æ–º–ø—å—é—Ç–µ—Ä", syllables: ["–∫–æ–º", "–ø—å—é", "—Ç–µ—Ä"] },
          { word: "–±–∞—Å–∫–µ—Ç–±–æ–ª", syllables: ["–±–∞—Å", "–∫–µ—Ç", "–±–æ–ª"] },
          { word: "—Ñ—É—Ç–±–æ–ª", syllables: ["—Ñ—É—Ç", "–±–æ–ª"] },
          { word: "–≤–µ–ª–æ—Å–∏–ø–µ–¥", syllables: ["–≤–µ", "–ª–æ", "—Å–∏", "–ø–µ–¥"] },
          { word: "—Å–∞–º–æ–∫–∞—Ç", syllables: ["—Å–∞", "–º–æ", "–∫–∞—Ç"] },
          { word: "–∞–ø–µ–ª—å—Å–∏–Ω", syllables: ["–∞", "–ø–µ–ª—å", "—Å–∏–Ω"] },
          { word: "–ø–æ–º–∏–¥–æ—Ä", syllables: ["–ø–æ", "–º–∏", "–¥–æ—Ä"] },
          { word: "–æ–≥–æ—Ä–æ–¥", syllables: ["–æ", "–≥–æ", "—Ä–æ–¥"] },
          { word: "—Å–∫–∞—Ç–µ—Ä—Ç—å", syllables: ["—Å–∫–∞", "—Ç–µ—Ä—Ç—å"] },
          { word: "–º–∞—Ç—Ä—ë—à–∫–∞", syllables: ["–º–∞", "—Ç—Ä—ë—à", "–∫–∞"] },
          { word: "—á–µ–º–æ–¥–∞–Ω", syllables: ["—á–µ", "–º–æ", "–¥–∞–Ω"] }
        ],
        currentIndex: 0,
        currentWord: "",
        syllables: [],
        shuffledSyllables: [],
        selectedSyllables: [],
        checked: false,
        isCorrect: false
      },
      
      // –ò–≥—Ä–∞ "–ß—Ç–æ –∫—É–¥–∞?"
      sortingGame: {
        rooms: [
          { id: 'kitchen', name: '–ö—É—Ö–Ω—è', icon: 'üç≥' },
          { id: 'bedroom', name: '–°–ø–∞–ª—å–Ω—è', icon: 'üõèÔ∏è' },
          { id: 'bathroom', name: '–í–∞–Ω–Ω–∞—è', icon: 'üöø' }
        ],
        items: [
          { id: 1, name: '–¢–æ—Å—Ç–µ—Ä', icon: 'üçû', correctRoom: 'kitchen', room: null, placed: false },
          { id: 2, name: '–ü–æ–¥—É—à–∫–∞', icon: 'üõèÔ∏è', correctRoom: 'bedroom', room: null, placed: false },
          { id: 3, name: '–ú—ã–ª–æ', icon: 'üßº', correctRoom: 'bathroom', room: null, placed: false },
          { id: 4, name: '–ö–∞—Å—Ç—Ä—é–ª—è', icon: 'ü•ò', correctRoom: 'kitchen', room: null, placed: false },
          { id: 5, name: '–û–¥–µ—è–ª–æ', icon: 'üõå', correctRoom: 'bedroom', room: null, placed: false },
          { id: 6, name: '–ó—É–±–Ω–∞—è —â–µ—Ç–∫–∞', icon: 'ü™•', correctRoom: 'bathroom', room: null, placed: false }
        ],
        selectedItem: null,
        selectedRoom: null,
        checked: false,
        allCorrect: false,
        showItemList: true  // –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
      }
    };
  },
  computed: {
    themeIcon() {
      return this.theme === 'light' ? 'üåô' : '‚òÄÔ∏è';
    },
    // –í–´–ß–ò–°–õ–Ø–ï–ú–û–ï –°–í–û–ô–°–¢–í–û –î–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø –ö–û–¢–ê
    gameFeedbackMessage() {
      if (!this.gameState.gameStarted) return this.gameState.feedbackMessages[0];
      if (this.gameState.gameCompleted) return this.gameState.feedbackMessages[3];
      if (this.gameState.matchedPairs > this.gameState.totalPairs / 2) {
        return this.gameState.feedbackMessages[2];
      }
      return this.gameState.feedbackMessages[1];
    },
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    sortingPlacedItems() {
      return this.sortingGame.items.filter(item => item.placed).length;
    },
    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç—ã
    availableItems() {
      return this.sortingGame.items.filter(item => !item.placed);
    }
  },
  methods: {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    goHome() {
      this.currentPage = 'home';
      this.mobileMenuOpen = false;
      this.selectedGame = null;
    },
    setTheme(newTheme) {
      this.theme = newTheme;
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
    },
    toggleTheme() {
      this.setTheme(this.theme === 'light' ? 'dark' : 'light');
    },

    // –ò–≥—Ä–∞ "–ù–∞–π–¥–∏ –ø–∞—Ä—É"
    initializeCards() {
      let gameCards = [];
      const selectedEmojis = [...this.gameState.emojis]
        .sort(() => 0.5 - Math.random())
        .slice(0, this.gameState.totalPairs);

      selectedEmojis.forEach(emoji => {
        gameCards.push({ value: emoji, isFlipped: false, isMatched: false });
        gameCards.push({ value: emoji, isFlipped: false, isMatched: false });
      });
      return gameCards.sort(() => Math.random() - 0.5);
    },
    startGame() {
      this.gameState.cards = this.initializeCards();
      this.gameState.gameStarted = true;
      this.gameState.gameCompleted = false;
      this.gameState.moves = 0;
      this.gameState.matchedPairs = 0;
      this.gameState.flippedCards = [];
    },
    resetGame() {
      this.startGame();
    },
    flipCard(index) {
      if (
        this.gameState.cards[index].isFlipped ||
        this.gameState.flippedCards.length === 2 ||
        this.gameState.gameCompleted ||
        this.gameState.cards[index].isMatched
      ) return;

      this.gameState.cards[index].isFlipped = true;
      this.gameState.flippedCards.push(index);

      if (this.gameState.flippedCards.length === 2) {
        this.gameState.moves++;
        const [firstIndex, secondIndex] = this.gameState.flippedCards;

        if (this.gameState.cards[firstIndex].value === this.gameState.cards[secondIndex].value) {
          // –°–æ–≤–ø–∞–ª–∏
          setTimeout(() => {
            this.gameState.cards[firstIndex].isMatched = true;
            this.gameState.cards[secondIndex].isMatched = true;
            this.gameState.matchedPairs++;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
            if (this.gameState.matchedPairs === this.gameState.totalPairs) {
              this.gameState.gameCompleted = true;
            }

            this.gameState.flippedCards = [];
          }, 500);
        } else {
          // –ù–µ —Å–æ–≤–ø–∞–ª–∏
          setTimeout(() => {
            this.gameState.cards[firstIndex].isFlipped = false;
            this.gameState.cards[secondIndex].isFlipped = false;
            this.gameState.flippedCards = [];
          }, 1000);
        }
      }
    },

    // –ò–≥—Ä–∞ "–£–≥–∞–¥–∞–π –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –±—É–∫–≤—É"
    startMissingLetterGame() {
      this.missingLetterGame.currentIndex = Math.floor(Math.random() * this.missingLetterGame.words.length);
      const wordObj = this.missingLetterGame.words[this.missingLetterGame.currentIndex];

      this.missingLetterGame.currentWord = wordObj.word;

      let display = wordObj.word.split('');
      display[wordObj.missingIndex] = '_';
      this.missingLetterGame.displayWord = display.join(' ');

      const correctLetter = wordObj.word[wordObj.missingIndex];
      let options = [correctLetter];

      while (options.length < 4) {
        const randomChar = String.fromCharCode(1072 + Math.floor(Math.random() * 32));
        if (!options.includes(randomChar) && randomChar !== correctLetter) {
          options.push(randomChar);
        }
      }

      this.missingLetterGame.options = options.sort(() => Math.random() - 0.5);
      this.missingLetterGame.selectedOption = null;
      this.missingLetterGame.answered = false;
      this.missingLetterGame.isCorrect = false;
    },
    checkMissingLetter(letter) {
      const wordObj = this.missingLetterGame.words[this.missingLetterGame.currentIndex];
      this.missingLetterGame.selectedOption = letter;
      this.missingLetterGame.isCorrect = letter === wordObj.word[wordObj.missingIndex];
      this.missingLetterGame.answered = true;
    },
    nextMissingLetter() {
      this.startMissingLetterGame();
    },

    // –ò–≥—Ä–∞ "–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–æ"
    startSyllablesGame() {
      this.syllablesGame.currentIndex = Math.floor(Math.random() * this.syllablesGame.words.length);
      const wordObj = this.syllablesGame.words[this.syllablesGame.currentIndex];

      this.syllablesGame.currentWord = wordObj.word;
      this.syllablesGame.syllables = [...wordObj.syllables];
      this.syllablesGame.shuffledSyllables = [...wordObj.syllables].sort(() => Math.random() - 0.5);
      this.syllablesGame.selectedSyllables = [];
      this.syllablesGame.checked = false;
      this.syllablesGame.isCorrect = false;
    },
    selectSyllable(syllable) {
      if (this.syllablesGame.selectedSyllables.length < this.syllablesGame.syllables.length) {
        this.syllablesGame.selectedSyllables.push(syllable);
      }
    },
    removeSyllable(index) {
      if (this.syllablesGame.selectedSyllables[index]) {
        this.syllablesGame.selectedSyllables.splice(index, 1);
      }
    },
    checkSyllablesWord() {
      const assembledWord = this.syllablesGame.selectedSyllables.join('');
      this.syllablesGame.isCorrect = assembledWord === this.syllablesGame.currentWord;
      this.syllablesGame.checked = true;
    },
    nextSyllables() {
      this.startSyllablesGame();
    },

    // –ò–≥—Ä–∞ "–ß—Ç–æ –∫—É–¥–∞?"
    startSortingGame() {
      this.sortingGame.items.forEach(item => {
        item.room = null;
        item.placed = false;
      });
      this.sortingGame.selectedItem = null;
      this.sortingGame.selectedRoom = null;
      this.sortingGame.checked = false;
      this.sortingGame.allCorrect = false;
      this.sortingGame.showItemList = true; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    },
    selectItem(itemId) {
      this.sortingGame.selectedItem = itemId;
      this.sortingGame.selectedRoom = null;
      
      // –ù–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
      if (window.innerWidth <= 320) {
        this.sortingGame.showItemList = false;
      }
    },
    placeItem(roomId) {
      if (!this.sortingGame.selectedItem) return;

      const item = this.sortingGame.items.find(i => i.id === this.sortingGame.selectedItem);
      if (item) {
        item.room = roomId;
        item.placed = true;
        this.sortingGame.selectedItem = null;
        this.sortingGame.selectedRoom = null;
        
        // –ù–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        if (window.innerWidth <= 320) {
          this.sortingGame.showItemList = true;
        }
      }
    },
    checkSorting() {
      this.sortingGame.checked = true;
      this.sortingGame.allCorrect = this.sortingGame.items.every(
        item => item.placed && item.room === item.correctRoom
      );
    },
    resetSorting() {
      this.startSortingGame();
    },
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    toggleItemList() {
      this.sortingGame.showItemList = !this.sortingGame.showItemList;
    }
  },
  mounted() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      this.setTheme(savedTheme);
    } else {
      this.setTheme('light');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä
    this.startMissingLetterGame();
    this.startSyllablesGame();
    this.startSortingGame();
  }
};

createApp(App).mount('#app');